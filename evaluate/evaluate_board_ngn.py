from othello import Othello
evaluation_table = [
    [100,10,40,30,30,40,10,100],
    [10,5,8,6,6,8,5,10],
    [40,8,15,10,10,15,8,40],
    [30,6,10,10,10,10,6,30],
    [30,6,10,10,10,10,6,30],
    [40,8,15,10,10,15,8,40],
    [10,5,8,6,6,8,5,10],
    [100,10,40,30,30,40,10,100]
    ]
[-11.786008895628882, 41.50897203773552, -2.3356251758158377, -4.786237570905092, 
 88.55805528675927, 17.851704688010408, -52.75016242004648, -84.14139803878729, 
 -10.142259439631093, -91.61534855382114, 75.9421282309921, 4.815796842780438, 
 188.55756685644718, 67.56934087818902, -3.667666664705032, 5.522193362593753, 
 -12.355341879640555, 16.097942650768786, -29.516304292527575, 33.2495203132659,
   -22.34477073183852, -722.3771342898339, 42.296534589652865, 84.10617810648499,
     12.702562717497425, 106.13043952994711, -41.39369276645605, -8.853308095653253, 
     -40.02818391165116, -198.71219125654622, 90.9437586087263, 2.6097623165729114, 
     66.5222163141614, -197.26546761205768, 15.768795329307771, 6.506234377377119, 
     -49.025669197594624, -7.224228288388265, -60.531078831387504, 123.53150996130869, 
     -93.44976664379507, -9.502359962428407, 70.0011567525987, 9.518201180829326, 
     -63.71372403115108, 169.3883699538011, 66.73403749351478, -6.0844025070886785,
       69.97610559415763, 165.9157181713478, -9.418462477110241, -83.45808069299466, 
       2.3666305395900817, 86.10864922961758, 66.41058029647255, -77.90036578984817, 
       -79.77632513599207, 82.89394560102384, 57.8604912205277, 94.84724598333229, 
       -66.74687219748861, -74.33723000994866, -63.383908893891835, -27.951576578534972]
def evaluate_board_ngn(board, color) :
    n = 0  
    for y in range(8):
        for x in range(8):
            if board[y][x] != 0:
                n += 1
    oth=Othello()
    oth.board=board
    if oth.winner()==color:
        black=0
        for i in range(8):
            for j in range(8):
                if board[i][j]==1:black+=1
                elif board[i][j]==2:black-=1
        return (black*1000)*(1 if color==1 else -1)

    score = 0
    opponent = 3-color
    for y in range(8):
        for x in range(8):
            if board[y][x] == color:
                score += evaluation_table[y][x]
            elif board[y][x] == opponent:
                score -= evaluation_table[y][x]
    return score if  color == 1 else -score
    
    
